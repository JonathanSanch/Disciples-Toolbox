"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.t = exports.ElysiaType = void 0;
const typebox_1 = require("@sinclair/typebox");
Object.defineProperty(exports, "t", { enumerable: true, get: function () { return typebox_1.Type; } });
const system_1 = require("@sinclair/typebox/system");
try {
    system_1.TypeSystem.Format('email', (value) => /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(value));
    system_1.TypeSystem.Format('uuid', (value) => /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(value));
    system_1.TypeSystem.Format('date', (value) => !Number.isNaN(new Date(value).getTime()));
    system_1.TypeSystem.Format('date-time', (value) => !Number.isNaN(new Date(value).getTime()));
}
catch (error) {
}
const parseFileUnit = (size) => {
    if (typeof size === 'string')
        switch (size.slice(-1)) {
            case 'k':
                return +size.slice(0, size.length - 1) * 1024;
            case 'm':
                return +size.slice(0, size.length - 1) * 1048576;
            default:
                return +size;
        }
    return size;
};
const validateFile = (options, value) => {
    if (!(value instanceof Blob))
        return false;
    if (options.minSize && value.size < parseFileUnit(options.minSize))
        return false;
    if (options.maxSize && value.size > parseFileUnit(options.maxSize))
        return false;
    if (options.extension)
        if (typeof options.extension === 'string') {
            if (!value.type.startsWith(options.extension))
                return false;
        }
        else {
            for (let i = 0; i < options.extension.length; i++)
                if (value.type.startsWith(options.extension[i]))
                    return true;
            return false;
        }
    return true;
};
exports.ElysiaType = {
    Numeric: system_1.TypeSystem.Type('Numeric', {}),
    File: system_1.TypeSystem.Type('File', validateFile),
    Files: system_1.TypeSystem.Type('Files', (options, value) => {
        if (!Array.isArray(value))
            return validateFile(options, value);
        if (options.minItems && value.length < options.minItems)
            return false;
        if (options.maxItems && value.length > options.maxItems)
            return false;
        for (let i = 0; i < value.length; i++)
            if (!validateFile(options, value[i]))
                return false;
        return true;
    })
};
typebox_1.Type.Numeric = (properties) => {
    return typebox_1.Type.Number({
        ...properties,
        elysiaMeta: 'Numeric'
    });
};
typebox_1.Type.URLEncoded = (property, options) => typebox_1.Type.Object(property, {
    ...options,
    elysiaMeta: 'URLEncoded'
});
typebox_1.Type.File = (arg) => exports.ElysiaType.File({
    elysiaMeta: 'File',
    default: 'File',
    ...arg,
    extension: arg?.type,
    type: 'string',
    format: 'binary'
});
typebox_1.Type.Files = (arg) => exports.ElysiaType.Files({
    ...arg,
    elysiaMeta: 'Files',
    default: 'Files',
    extension: arg?.type,
    type: 'array',
    items: {
        ...arg,
        default: 'Files',
        type: 'string',
        format: 'binary'
    }
});
