"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationError = exports.ParseError = exports.NotFoundError = exports.InternalServerError = exports.isProduction = exports.ERROR_CODE = void 0;
const value_1 = require("@sinclair/typebox/value");
const env = typeof Bun !== 'undefined'
    ? Bun.env
    : typeof process !== 'undefined'
        ? process?.env
        : undefined;
exports.ERROR_CODE = Symbol('ErrorCode');
exports.isProduction = (env?.NODE_ENV ?? env?.ENV) === 'production';
class InternalServerError extends Error {
    constructor() {
        super('INTERNAL_SERVER_ERROR');
        this.code = 'NOT_FOUND';
        this.status = 500;
    }
}
exports.InternalServerError = InternalServerError;
class NotFoundError extends Error {
    constructor() {
        super('NOT_FOUND');
        this.code = 'NOT_FOUND';
        this.status = 404;
    }
}
exports.NotFoundError = NotFoundError;
class ParseError extends Error {
    constructor() {
        super('PARSE');
        this.code = 'PARSE';
        this.status = 400;
    }
}
exports.ParseError = ParseError;
class ValidationError extends Error {
    constructor(type, validator, value) {
        const error = exports.isProduction ? undefined : validator.Errors(value).First();
        const customError = error?.schema.error
            ? typeof error.schema.error === 'function'
                ? error.schema.error(type, validator, value)
                : error.schema.error
            : undefined;
        const message = exports.isProduction
            ? customError ??
                `Invalid ${type ?? error?.schema.error ?? error?.message}`
            : customError ??
                `Invalid ${type}, '${error?.path?.slice(1) || 'type'}': ${error?.message}` +
                    '\n\n' +
                    'Expected: ' +
                    JSON.stringify(value_1.Value.Create(validator.schema), null, 2) +
                    '\n\n' +
                    'Found: ' +
                    JSON.stringify(value, null, 2);
        super(message);
        this.type = type;
        this.validator = validator;
        this.value = value;
        this.code = 'VALIDATION';
        this.status = 400;
        Object.setPrototypeOf(this, ValidationError.prototype);
    }
    get all() {
        return [...this.validator.Errors(this.value)];
    }
    get model() {
        return value_1.Value.Create(this.validator.schema);
    }
    toResponse(headers) {
        return new Response(this.message, {
            status: 400,
            headers
        });
    }
}
exports.ValidationError = ValidationError;
