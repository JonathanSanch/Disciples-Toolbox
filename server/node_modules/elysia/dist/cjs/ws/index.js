"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ws = exports.ElysiaWS = void 0;
const memoirist_1 = require("memoirist");
const error_1 = require("../error");
const getPath = (url) => {
    const start = url.indexOf('/', 10);
    const end = url.indexOf('?', start);
    if (end === -1)
        return url.slice(start);
    return url.slice(start, end);
};
class ElysiaWS {
    constructor(ws) {
        this.raw = ws;
        this.data = ws.data;
        this.isSubscribed = ws.isSubscribed;
    }
    publish(topic, data = undefined, compress) {
        if (typeof data === 'object')
            data = JSON.stringify(data);
        this.raw.publish(topic, data, compress);
        return this;
    }
    publishToSelf(topic, data = undefined, compress) {
        if (typeof data === 'object')
            data = JSON.stringify(data);
        this.raw.publish(topic, data, compress);
        return this;
    }
    send(data) {
        if (typeof data === 'object')
            data = JSON.stringify(data);
        this.raw.send(data);
        return this;
    }
    subscribe(room) {
        this.raw.subscribe(room);
        return this;
    }
    unsubscribe(room) {
        this.raw.unsubscribe(room);
        return this;
    }
    cork(callback) {
        this.raw.cork(callback);
        return this;
    }
    close() {
        this.raw.close();
        return this;
    }
}
exports.ElysiaWS = ElysiaWS;
const ws = (config) => (app) => {
    if (!app.wsRouter)
        app.wsRouter = new memoirist_1.Memoirist();
    const router = app.wsRouter;
    if (!app.config.serve)
        app.config.serve = {
            websocket: {
                ...config,
                open(ws) {
                    if (!ws.data)
                        return;
                    const url = getPath((ws?.data).request.url);
                    if (!url)
                        return;
                    const route = router.find('subscribe', url)?.store;
                    if (route && route.open)
                        route.open(new ElysiaWS(ws));
                },
                message(ws, message) {
                    if (!ws.data)
                        return;
                    const url = getPath((ws?.data).request.url);
                    if (!url)
                        return;
                    const route = router.find('subscribe', url)?.store;
                    if (!route?.message)
                        return;
                    message = message.toString();
                    const start = message.charCodeAt(0);
                    if (start === 47 || start === 123)
                        try {
                            message = JSON.parse(message);
                        }
                        catch (error) {
                        }
                    else if (!Number.isNaN(+message))
                        message = +message;
                    for (let i = 0; i <
                        ws.data
                            .transformMessage.length; i++) {
                        const temp = ws.data.transformMessage[i](message);
                        if (temp !== undefined)
                            message = temp;
                    }
                    if (ws.data.message?.Check(message) === false)
                        return void ws.send(new error_1.ValidationError('message', ws.data
                            .message, message).cause);
                    route.message(new ElysiaWS(ws), message);
                },
                close(ws, code, reason) {
                    if (!ws.data)
                        return;
                    const url = getPath((ws?.data).request.url);
                    if (!url)
                        return;
                    const route = router.find('subscribe', url)?.store;
                    if (route && route.close)
                        route.close(new ElysiaWS(ws), code, reason);
                },
                drain(ws) {
                    if (!ws.data)
                        return;
                    const url = getPath((ws?.data).request.url);
                    if (!url)
                        return;
                    const route = router.find('subscribe', url)?.store;
                    if (route && route.drain)
                        route.drain(new ElysiaWS(ws));
                }
            }
        };
    return app
        .decorate('publish', app.server?.publish)
        .onStart((app) => {
        app.decorators.publish = app.server?.publish;
    });
};
exports.ws = ws;
