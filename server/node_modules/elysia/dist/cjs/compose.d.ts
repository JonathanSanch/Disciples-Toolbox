import type { Elysia } from '.';
import type { ElysiaConfig, ComposedHandler, HTTPMethod, LocalHandler, RegisteredHook, SchemaValidator, BeforeRequestHandler } from './types';
import type { TAnySchema } from '@sinclair/typebox';
export declare const hasReturn: (fnLiteral: string) => boolean;
export declare const isFnUse: (keyword: string, fnLiteral: string) => boolean;
export declare const findElysiaMeta: (type: string, schema: TAnySchema, found?: string[], parent?: string) => string[] | "root" | null;
export declare const isAsync: (fn: Function) => boolean;
export declare const composeHandler: ({ method, hooks, validator, handler, handleError, meta, onRequest, config }: {
    path: string;
    method: HTTPMethod;
    hooks: RegisteredHook<any>;
    validator: SchemaValidator;
    handler: LocalHandler<any, any>;
    handleError: Elysia['handleError'];
    meta?: {
        schema: {};
        defs: {};
        exposed: {};
    } | undefined;
    onRequest: BeforeRequestHandler<any, any>[];
    config: ElysiaConfig<any>;
}) => ComposedHandler;
export declare const composeGeneralHandler: (app: Elysia<any, any>) => any;
export declare const composeErrorHandler: (app: Elysia<any, any>) => any;
