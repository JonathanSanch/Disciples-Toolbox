import { TSchema } from '@sinclair/typebox';
import { TypeCheck } from '@sinclair/typebox/compiler';
import type { ElysiaInstance, LifeCycleStore, LocalHook, TypedSchema, RegisteredHook, WithArray } from './types';
export declare const mergeDeep: any;
export declare const mergeObjectArray: <T>(a: T | T[], b: T | T[]) => T[];
export declare const mergeHook: (a: LocalHook<any, any> | LifeCycleStore<any>, b: LocalHook<any, any>) => RegisteredHook<any>;
export declare const getSchemaValidator: (s: TSchema | string | undefined, { models, additionalProperties, dynamic }: {
    models?: Record<string, TSchema> | undefined;
    additionalProperties?: boolean | undefined;
    dynamic?: boolean | undefined;
}) => TypeCheck<TSchema> | undefined;
export declare const getResponseSchemaValidator: (s: TypedSchema['response'] | undefined, { models, additionalProperties, dynamic }: {
    models?: Record<string, TSchema> | undefined;
    additionalProperties?: boolean | undefined;
    dynamic?: boolean | undefined;
}) => Record<number, TypeCheck<any>> | undefined;
export declare const checksum: (s: string) => number;
export declare const mergeLifeCycle: <A extends ElysiaInstance, B extends ElysiaInstance>(a: LifeCycleStore<A>, b: LifeCycleStore<B> | LocalHook<{}, B>, checksum?: number) => LifeCycleStore<A & B>;
export declare const asGlobalHook: <T extends LocalHook<any, any>>(hook: T, inject?: boolean) => T;
export declare const asGlobal: <T extends WithArray<Function> | undefined>(fn: T, inject?: boolean) => T;
export declare const filterGlobalHook: <T extends LocalHook<any, any>>(hook: T) => T;
