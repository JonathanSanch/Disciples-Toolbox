import{Kind as e}from"@sinclair/typebox";import{Value as r}from"@sinclair/typebox/value";import{TypeCompiler as o}from"@sinclair/typebox/compiler";import a from"mergician";export const mergeDeep=a({appendArrays:!0});export const mergeObjectArray=(e,r)=>{let o=[...Array.isArray(e)?e:[e]],a=[];for(let e of o)e.$elysiaChecksum&&a.push(e.$elysiaChecksum);for(let e of Array.isArray(r)?r:[r])a.includes(e?.$elysiaChecksum)||o.push(e);return o};export const mergeHook=(e,r)=>({body:r?.body??e?.body,headers:r?.headers??e?.headers,params:r?.params??e?.params,query:r?.query??e?.query,response:r?.response??e?.response,type:e?.type||r?.type,detail:mergeDeep(r?.detail??{},e?.detail??{}),parse:mergeObjectArray(e.parse??[],r?.parse??[]),transform:mergeObjectArray(e.transform??[],r?.transform??[]),beforeHandle:mergeObjectArray(e.beforeHandle??[],r?.beforeHandle??[]),afterHandle:mergeObjectArray(e.afterHandle??[],r?.afterHandle??[]),onResponse:mergeObjectArray(e.onResponse??[],r?.onResponse??[]),error:mergeObjectArray(e.error??[],r?.error??[])});export const getSchemaValidator=(e,{models:a={},additionalProperties:t=!1,dynamic:s=!1})=>{if(!e||"string"==typeof e&&!(e in a))return;let n="string"==typeof e?a[e]:e;return("object"===n.type&&"additionalProperties"in n==!1&&(n.additionalProperties=t),s)?{schema:n,references:"",checkFunc:()=>{},code:"",Check:e=>r.Check(n,e),Errors:e=>r.Errors(n,e),Code:()=>""}:o.Compile(n)};export const getResponseSchemaValidator=(a,{models:t={},additionalProperties:s=!1,dynamic:n=!1})=>{if(!a||"string"==typeof a&&!(a in t))return;let l="string"==typeof a?t[a]:a,p=e=>n?{schema:e,references:"",checkFunc:()=>{},code:"",Check:o=>r.Check(e,o),Errors:o=>r.Errors(e,o),Code:()=>""}:o.Compile(e);if(e in l)return{200:p(l)};let i={};return Object.keys(l).forEach(r=>{let o=l[r];if("string"==typeof o){if(o in t){let a=t[o];a.type,i[+r]=e in a?p(a):a}return}"object"===o.type&&"additionalProperties"in o==!1&&(o.additionalProperties=s),i[+r]=e in o?p(o):o}),i};export const checksum=e=>{let r=9;for(let o=0;o<e.length;)r=Math.imul(r^e.charCodeAt(o++),387420489);return r^r>>>9};export const mergeLifeCycle=(e,r,o)=>{let a=e=>(o&&(e.$elysiaChecksum=o),e);return{start:mergeObjectArray(e.start,("start"in r?r.start:[]).map(a)),request:mergeObjectArray(e.request,("request"in r?r.request:[]).map(a)),parse:mergeObjectArray(e.parse,r?.parse??[]).map(a),transform:mergeObjectArray(e.transform,(r?.transform??[]).map(a)),beforeHandle:mergeObjectArray(e.beforeHandle,(r?.beforeHandle??[]).map(a)),afterHandle:mergeObjectArray(e.afterHandle,(r?.afterHandle??[]).map(a)),onResponse:mergeObjectArray(e.onResponse,(r?.onResponse??[]).map(a)),error:mergeObjectArray(e.error,(r?.error??[]).map(a)),stop:mergeObjectArray(e.stop,("stop"in r?r.stop:[]).map(a))}};export const asGlobalHook=(e,r=!0)=>({...e,type:e?.type,detail:e?.detail,parse:asGlobal(e?.parse,r),transform:asGlobal(e?.transform,r),beforeHandle:asGlobal(e?.beforeHandle,r),afterHandle:asGlobal(e?.afterHandle,r),onResponse:asGlobal(e?.onResponse,r),error:asGlobal(e?.error,r)});export const asGlobal=(e,r=!0)=>e?"function"==typeof e?(r?e.$elysiaHookType="global":e.$elysiaHookType=void 0,e):e.map(e=>(r?e.$elysiaHookType="global":e.$elysiaHookType=void 0,e)):e;let t=e=>e?"function"==typeof e?"global"===e.$elysiaHookType?e:void 0:e.filter(e=>"global"===e.$elysiaHookType):e;export const filterGlobalHook=e=>({...e,type:e?.type,detail:e?.detail,parse:t(e?.parse),transform:t(e?.transform),beforeHandle:t(e?.beforeHandle),afterHandle:t(e?.afterHandle),onResponse:t(e?.onResponse),error:t(e?.error)});