"use strict";
/*--------------------------------------------------------------------------

@sinclair/typebox/value

The MIT License (MIT)

Copyright (c) 2017-2023 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cast = exports.ValueCastDereferenceError = exports.ValueCastUnknownTypeError = exports.ValueCastRecursiveTypeError = exports.ValueCastNeverTypeError = exports.ValueCastArrayUniqueItemsTypeError = exports.ValueCastReferenceTypeError = void 0;
const Types = require("../typebox");
const ValueCreate = require("./create");
const ValueCheck = require("./check");
const ValueClone = require("./clone");
const ValueGuard = require("./guard");
// --------------------------------------------------------------------------
// Errors
// --------------------------------------------------------------------------
class ValueCastReferenceTypeError extends Error {
    constructor(schema) {
        super(`ValueCast: Cannot locate referenced schema with $id '${schema.$ref}'`);
        this.schema = schema;
    }
}
exports.ValueCastReferenceTypeError = ValueCastReferenceTypeError;
class ValueCastArrayUniqueItemsTypeError extends Error {
    constructor(schema, value) {
        super('ValueCast: Array cast produced invalid data due to uniqueItems constraint');
        this.schema = schema;
        this.value = value;
    }
}
exports.ValueCastArrayUniqueItemsTypeError = ValueCastArrayUniqueItemsTypeError;
class ValueCastNeverTypeError extends Error {
    constructor(schema) {
        super('ValueCast: Never types cannot be cast');
        this.schema = schema;
    }
}
exports.ValueCastNeverTypeError = ValueCastNeverTypeError;
class ValueCastRecursiveTypeError extends Error {
    constructor(schema) {
        super('ValueCast.Recursive: Cannot cast recursive schemas');
        this.schema = schema;
    }
}
exports.ValueCastRecursiveTypeError = ValueCastRecursiveTypeError;
class ValueCastUnknownTypeError extends Error {
    constructor(schema) {
        super('ValueCast: Unknown type');
        this.schema = schema;
    }
}
exports.ValueCastUnknownTypeError = ValueCastUnknownTypeError;
class ValueCastDereferenceError extends Error {
    constructor(schema) {
        super(`ValueCast: Unable to dereference type with $id '${schema.$ref}'`);
        this.schema = schema;
    }
}
exports.ValueCastDereferenceError = ValueCastDereferenceError;
// --------------------------------------------------------------------------
// The following will score a schema against a value. For objects, the score
// is the tally of points awarded for each property of the value. Property
// points are (1.0 / propertyCount) to prevent large property counts biasing
// results. Properties that match literal values are maximally awarded as
// literals are typically used as union discriminator fields.
// --------------------------------------------------------------------------
var UnionCastCreate;
(function (UnionCastCreate) {
    function Score(schema, references, value) {
        if (schema[Types.Kind] === 'Object' && typeof value === 'object' && !ValueGuard.IsNull(value)) {
            const object = schema;
            const keys = Object.getOwnPropertyNames(value);
            const entries = Object.entries(object.properties);
            const [point, max] = [1 / entries.length, entries.length];
            return entries.reduce((acc, [key, schema]) => {
                const literal = schema[Types.Kind] === 'Literal' && schema.const === value[key] ? max : 0;
                const checks = ValueCheck.Check(schema, references, value[key]) ? point : 0;
                const exists = keys.includes(key) ? point : 0;
                return acc + (literal + checks + exists);
            }, 0);
        }
        else {
            return ValueCheck.Check(schema, references, value) ? 1 : 0;
        }
    }
    function Select(union, references, value) {
        let [select, best] = [union.anyOf[0], 0];
        for (const schema of union.anyOf) {
            const score = Score(schema, references, value);
            if (score > best) {
                select = schema;
                best = score;
            }
        }
        return select;
    }
    function Create(union, references, value) {
        if ('default' in union) {
            return union.default;
        }
        else {
            const schema = Select(union, references, value);
            return Cast(schema, references, value);
        }
    }
    UnionCastCreate.Create = Create;
})(UnionCastCreate || (UnionCastCreate = {}));
// --------------------------------------------------------------------------
// Cast
// --------------------------------------------------------------------------
function TAny(schema, references, value) {
    return ValueCheck.Check(schema, references, value) ? ValueClone.Clone(value) : ValueCreate.Create(schema, references);
}
function TArray(schema, references, value) {
    if (ValueCheck.Check(schema, references, value))
        return ValueClone.Clone(value);
    const created = ValueGuard.IsArray(value) ? ValueClone.Clone(value) : ValueCreate.Create(schema, references);
    const minimum = ValueGuard.IsNumber(schema.minItems) && created.length < schema.minItems ? [...created, ...Array.from({ length: schema.minItems - created.length }, () => null)] : created;
    const maximum = ValueGuard.IsNumber(schema.maxItems) && minimum.length > schema.maxItems ? minimum.slice(0, schema.maxItems) : minimum;
    const casted = maximum.map((value) => Visit(schema.items, references, value));
    if (schema.uniqueItems !== true)
        return casted;
    const unique = [...new Set(casted)];
    if (!ValueCheck.Check(schema, references, unique))
        throw new ValueCastArrayUniqueItemsTypeError(schema, unique);
    return unique;
}
function TAsyncIterator(schema, references, value) {
    return ValueCheck.Check(schema, references, value) ? value : ValueCreate.Create(schema, references);
}
function TBigInt(schema, references, value) {
    return ValueCheck.Check(schema, references, value) ? value : ValueCreate.Create(schema, references);
}
function TBoolean(schema, references, value) {
    return ValueCheck.Check(schema, references, value) ? value : ValueCreate.Create(schema, references);
}
function TConstructor(schema, references, value) {
    if (ValueCheck.Check(schema, references, value))
        return ValueCreate.Create(schema, references);
    const required = new Set(schema.returns.required || []);
    const result = function () { };
    for (const [key, property] of Object.entries(schema.returns.properties)) {
        if (!required.has(key) && value.prototype[key] === undefined)
            continue;
        result.prototype[key] = Visit(property, references, value.prototype[key]);
    }
    return result;
}
function TDate(schema, references, value) {
    return ValueCheck.Check(schema, references, value) ? ValueClone.Clone(value) : ValueCreate.Create(schema, references);
}
function TFunction(schema, references, value) {
    return ValueCheck.Check(schema, references, value) ? value : ValueCreate.Create(schema, references);
}
function TInteger(schema, references, value) {
    return ValueCheck.Check(schema, references, value) ? value : ValueCreate.Create(schema, references);
}
function TIntersect(schema, references, value) {
    const created = ValueCreate.Create(schema, references);
    const mapped = ValueGuard.IsPlainObject(created) && ValueGuard.IsPlainObject(value) ? { ...created, ...value } : value;
    return ValueCheck.Check(schema, references, mapped) ? mapped : ValueCreate.Create(schema, references);
}
function TIterator(schema, references, value) {
    return ValueCheck.Check(schema, references, value) ? value : ValueCreate.Create(schema, references);
}
function TLiteral(schema, references, value) {
    return ValueCheck.Check(schema, references, value) ? value : ValueCreate.Create(schema, references);
}
function TNever(schema, references, value) {
    throw new ValueCastNeverTypeError(schema);
}
function TNot(schema, references, value) {
    return ValueCheck.Check(schema, references, value) ? value : ValueCreate.Create(schema, references);
}
function TNull(schema, references, value) {
    return ValueCheck.Check(schema, references, value) ? value : ValueCreate.Create(schema, references);
}
function TNumber(schema, references, value) {
    return ValueCheck.Check(schema, references, value) ? value : ValueCreate.Create(schema, references);
}
function TObject(schema, references, value) {
    if (ValueCheck.Check(schema, references, value))
        return value;
    if (value === null || typeof value !== 'object')
        return ValueCreate.Create(schema, references);
    const required = new Set(schema.required || []);
    const result = {};
    for (const [key, property] of Object.entries(schema.properties)) {
        if (!required.has(key) && value[key] === undefined)
            continue;
        result[key] = Visit(property, references, value[key]);
    }
    // additional schema properties
    if (typeof schema.additionalProperties === 'object') {
        const propertyNames = Object.getOwnPropertyNames(schema.properties);
        for (const propertyName of Object.getOwnPropertyNames(value)) {
            if (propertyNames.includes(propertyName))
                continue;
            result[propertyName] = Visit(schema.additionalProperties, references, value[propertyName]);
        }
    }
    return result;
}
function TPromise(schema, references, value) {
    return ValueCheck.Check(schema, references, value) ? value : ValueCreate.Create(schema, references);
}
function TRecord(schema, references, value) {
    if (ValueCheck.Check(schema, references, value))
        return ValueClone.Clone(value);
    if (value === null || typeof value !== 'object' || Array.isArray(value) || value instanceof Date)
        return ValueCreate.Create(schema, references);
    const subschemaPropertyName = Object.getOwnPropertyNames(schema.patternProperties)[0];
    const subschema = schema.patternProperties[subschemaPropertyName];
    const result = {};
    for (const [propKey, propValue] of Object.entries(value)) {
        result[propKey] = Visit(subschema, references, propValue);
    }
    return result;
}
function TRef(schema, references, value) {
    const index = references.findIndex((foreign) => foreign.$id === schema.$ref);
    if (index === -1)
        throw new ValueCastDereferenceError(schema);
    const target = references[index];
    return Visit(target, references, value);
}
function TString(schema, references, value) {
    return ValueCheck.Check(schema, references, value) ? value : ValueCreate.Create(schema, references);
}
function TSymbol(schema, references, value) {
    return ValueCheck.Check(schema, references, value) ? ValueClone.Clone(value) : ValueCreate.Create(schema, references);
}
function TTemplateLiteral(schema, references, value) {
    return ValueCheck.Check(schema, references, value) ? ValueClone.Clone(value) : ValueCreate.Create(schema, references);
}
function TThis(schema, references, value) {
    const index = references.findIndex((foreign) => foreign.$id === schema.$ref);
    if (index === -1)
        throw new ValueCastDereferenceError(schema);
    const target = references[index];
    return Visit(target, references, value);
}
function TTuple(schema, references, value) {
    if (ValueCheck.Check(schema, references, value))
        return ValueClone.Clone(value);
    if (!ValueGuard.IsArray(value))
        return ValueCreate.Create(schema, references);
    if (schema.items === undefined)
        return [];
    return schema.items.map((schema, index) => Visit(schema, references, value[index]));
}
function TUndefined(schema, references, value) {
    return ValueCheck.Check(schema, references, value) ? ValueClone.Clone(value) : ValueCreate.Create(schema, references);
}
function TUnion(schema, references, value) {
    return ValueCheck.Check(schema, references, value) ? ValueClone.Clone(value) : UnionCastCreate.Create(schema, references, value);
}
function TUint8Array(schema, references, value) {
    return ValueCheck.Check(schema, references, value) ? ValueClone.Clone(value) : ValueCreate.Create(schema, references);
}
function TUnknown(schema, references, value) {
    return ValueCheck.Check(schema, references, value) ? ValueClone.Clone(value) : ValueCreate.Create(schema, references);
}
function TVoid(schema, references, value) {
    return ValueCheck.Check(schema, references, value) ? ValueClone.Clone(value) : ValueCreate.Create(schema, references);
}
function TKind(schema, references, value) {
    return ValueCheck.Check(schema, references, value) ? ValueClone.Clone(value) : ValueCreate.Create(schema, references);
}
function Visit(schema, references, value) {
    const references_ = ValueGuard.IsString(schema.$id) ? [...references, schema] : references;
    const schema_ = schema;
    switch (schema[Types.Kind]) {
        case 'Any':
            return TAny(schema_, references_, value);
        case 'Array':
            return TArray(schema_, references_, value);
        case 'AsyncIterator':
            return TAsyncIterator(schema_, references_, value);
        case 'BigInt':
            return TBigInt(schema_, references_, value);
        case 'Boolean':
            return TBoolean(schema_, references_, value);
        case 'Constructor':
            return TConstructor(schema_, references_, value);
        case 'Date':
            return TDate(schema_, references_, value);
        case 'Function':
            return TFunction(schema_, references_, value);
        case 'Integer':
            return TInteger(schema_, references_, value);
        case 'Intersect':
            return TIntersect(schema_, references_, value);
        case 'Iterator':
            return TIterator(schema_, references_, value);
        case 'Literal':
            return TLiteral(schema_, references_, value);
        case 'Never':
            return TNever(schema_, references_, value);
        case 'Not':
            return TNot(schema_, references_, value);
        case 'Null':
            return TNull(schema_, references_, value);
        case 'Number':
            return TNumber(schema_, references_, value);
        case 'Object':
            return TObject(schema_, references_, value);
        case 'Promise':
            return TPromise(schema_, references_, value);
        case 'Record':
            return TRecord(schema_, references_, value);
        case 'Ref':
            return TRef(schema_, references_, value);
        case 'String':
            return TString(schema_, references_, value);
        case 'Symbol':
            return TSymbol(schema_, references_, value);
        case 'TemplateLiteral':
            return TTemplateLiteral(schema_, references_, value);
        case 'This':
            return TThis(schema_, references_, value);
        case 'Tuple':
            return TTuple(schema_, references_, value);
        case 'Undefined':
            return TUndefined(schema_, references_, value);
        case 'Union':
            return TUnion(schema_, references_, value);
        case 'Uint8Array':
            return TUint8Array(schema_, references_, value);
        case 'Unknown':
            return TUnknown(schema_, references_, value);
        case 'Void':
            return TVoid(schema_, references_, value);
        default:
            if (!Types.TypeRegistry.Has(schema_[Types.Kind]))
                throw new ValueCastUnknownTypeError(schema_);
            return TKind(schema_, references_, value);
    }
}
/** Casts a value into a given type. The return value will retain as much information of the original value as possible. */
function Cast(...args) {
    return args.length === 3 ? Visit(args[0], args[1], args[2]) : Visit(args[0], [], args[1]);
}
exports.Cast = Cast;
